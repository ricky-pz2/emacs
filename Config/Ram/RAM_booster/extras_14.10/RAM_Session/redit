#!/bin/bash

#Written On: Dec 2014
#Written By: Tal
#Written For: Ubuntu Forums Community
#Description:
#	This script is used to edit the RAM Session. Since
#	the squashfs image is read only, this script mounts the
#	Original OS to /mnt/Original_OS/, and chroots the user to
#	the /mnt/Original_OS/var/squashfs directory, letting the user
#	install or change anything they wish. When the user is done, the
#	scripts automatically recreates the squashfs image and places it
#	where it needs to be so that the next time the system reboots,
#	it boots from the new image.

############################
# Only run if user is root #
############################

uid=$(/usr/bin/id -u) && [ "$uid" = "0" ] || 
{
	clear
	echo "You must be root to run $0."
	echo "Try again with the command 'sudo $0'"
	exit 1
} 

##################################################################################
# Check if the user is trying to run this script from outside of the RAM Session #
##################################################################################

if [ ! -e /RAM_Session ]
then
	clear
	echo "This script cannot be run from outside of the RAM Session."
	exit 0
fi

##########################################################################
# Check if the user is trying to run this script from inside of a chroot #
##########################################################################

if [[ "$(ls -di / | cut -d ' ' -f 1)" != 2 ]] && [[ "$(ls -di / | cut -d ' ' -f 1)" != 128 ]]
then
	echo "This script cannot be run from inside of a chroot"
	exit 0
fi

####################
# Global Variables #
####################

#Path to the file that contains all the functions for this script
RLIB=/var/lib/ram_booster/rlib
#Figure out $DEST
DEST=$(cat /var/lib/ram_booster/conf | grep -v '^#' | grep DEST= | sed 's/DEST=//g')
#Remove leading slash from $DEST
DEST="${DEST#/}"
#The mountpoint of the Original OS device
#Note: If you change it here, be sure to change it in the rupdate script as well
Orig_OS='/mnt/Original_OS/'

##########################################################
# Source the file with all the functions for this script #
##########################################################

if [[ -e $RLIB ]]
then
        . $RLIB

	#Check if there was a problem
	if [[ "$?" != "0" ]]
	then
		echo
		echo "The library that comes with RAM Booster ($RLIB) failed to be sourced"
		echo "Is it broken?"
		exit 1
	fi
else
        clear
        echo "The library that comes with RAM Booster ($RLIB) was not found!"
        exit 1
fi

#####################
# The usage message #
#####################

Usage()
{
	echo "Usage:"
	echo "$0 -s, --squashfs"
	echo "	Skip chroot and recreate the squashfs image"
	echo "$0 -h, --help"
	echo "	This help message"
}

###############################
# Check args passed to script #
###############################

if [[ "$#" -gt 1 ]]
then
	echo 'Invalid number of arguments'
	Usage
	exit 1
fi

case "$1" in
	-s|--squashfs)
		#Ask user if he wants to recreate filesystem.squashfs
		#This basically just lets the user skip the chroot completely
		clear
		echo "Are you sure you want to recreate the squashfs image?"
		echo "This may take some time to complete"
		echo "You may use the computer normally during this process - you will NOT disrupt it"
		echo
		read -p "Your choice [y/N]: " answer

		#Convert answer to lowercase
		answer=$(toLower $answer)

		case $answer in
			y|yes)  
				#Create squashfs image
				clear
				CreateSquashfs
				;;
			*)
				echo
				echo "You chose to NOT recreate the squashfs image"
				exit 0
				;;
		esac

		exit 0
		;;
	-h|--help)
		Usage
		exit 0
		;;
	"")
		#No args is fine
		;;
	*)
		echo "'$1' is not a valid argument"
		Usage
		exit 1
		;;
esac
		

############
# Mount FS #
############

#Mount the RAM Session, and bind all the pseudo filesystems to it
MOUNT_RS

#Clear terminal
clear

#####################################################
# Tell user about any user home dirs we had to bind #
#####################################################

if mount | grep bind | grep -q $"${Orig_OS%/}/${DEST%/}/home/[^ \t]*"
then
	echo "The following encrypted home directories were automatically mounted,"
	echo "since you are currently logged into them:"
	echo
	mount | grep bind | grep $"${Orig_OS%/}/${DEST%/}/home/[^ \t]*" | sed 's/on.*//g'
	echo
fi

############################
# Let user into the chroot #
############################

sudo chroot $Orig_OS/$DEST/ /bin/bash

######################
# Some quick cleanup #
######################

#Clean apt cache quietly
sudo chroot $Orig_OS/$DEST/ /bin/bash -c "apt-get -y clean" &>/dev/null

#Update fake /boot, just in case any packages being installed in the
#RAM Session want /boot to be consistent with the running system
#Note: This is usually only necessary during an update, but we do it
#	anyway in case the user did updates in the redit instead of
#	using rupdate
sudo mount -o bind $Orig_OS/$DEST/ $Orig_OS/$DEST/mnt/ &>/dev/null &&
sudo rsync --delete -a $Orig_OS/$DEST/boot/ $Orig_OS/$DEST/mnt/boot/ --exclude=/IMPORTANT_README &>/dev/null &&
sudo umount $Orig_OS/$DEST/mnt/ &>/dev/null

clear

##########################################################################
# Check if /etc/kernel/postinst.d/zd_warn has set a flag that shows that #
# a kernel update occurred. If it has, the user should get a warning     #
##########################################################################

if [[ -e $Orig_OS/$DEST/WARN ]]
then
	echo "WARNING: A KERNEL UPDATE JUST OCCURRED, AND THE RAM SESSION GRUB ENTRY"
	echo "HAS BEEN MODIFIED TO USE THE NEW KERNEL. YOU MUST RECREATE THE SQUASHFS"
	echo "IMAGE BEFORE YOU REBOOT OR YOUR RAM SESSION WILL NOT HAVE THE MODULES"
	echo "TO USE THE NEW KERNEL, AND MAY FAIL TO BOOT!"
	rm $Orig_OS/$DEST/WARN
	echo
fi

#Unmount everything
UMOUNT_RS

#If there was a problem unmounting stuff, tell user to reboot
if [[ "$?" != "0" ]]
then
	echo "There was an error unmounting ${Orig_OS}"
	echo "A reboot should fix that"
	echo "After the reboot, if you need to save your changes by recreating"
	echo "the squashfs image, just run \"sudo redit -s\""
	exit 1
fi

#################################
# Recreating the SquashFS Image #
#################################

#Ask user if he wants to recreate filesystem.squashfs
echo "Would you like to save your changes by recreating the squashfs image?"
echo "This may take some time to complete"
echo "You may use the computer normally during this process - you will NOT disrupt it"
echo
read -p "Your choice [y/N]: " answer

#Convert answer to lowercase
answer=$(toLower $answer)

case $answer in
	y|yes)  
		#Create squashfs image
		clear
		CreateSquashfs
		;;
	*)
		echo
		echo "You chose to NOT recreate the squashfs image"
		echo "If you change your mind, run 'sudo redit -s'"
		exit 0
		;;
esac

